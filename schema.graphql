type Query {
	user: User!
  menuItem(menuItemId: ID!): MenuItem!
  menuItems: [MenuItem!]!
	locations: [Location!]!
	ordersByLocationAndStatus(locationId: ID!, status: MealStatus!): [Order]!
	transactionsByDate(locationId: ID!, first: Int, orderBy: TransactionOrderByInput): [Transaction]!
	menuItemsByCategory(menuCategoryId: ID!): [MenuItem]!
	optionsByMenuItem(menuItemId: ID!, orderByOptions: OptionOrderByInput!	 ): [Option]!
}

type Mutation {
	createMenuItem(title: String!, price: Int!, pictureURL: URL!, categoryId: ID!, description: String!, calories: Int!): MenuItem
  createTransaction(locationId: ID!, menuItemId: ID!): Transaction
	createOrder(locationId: ID!, menuItemId: ID!, options: [ID!]!): Order
	createLocation(address: String!, phoneNumber: PhoneNumber!, email: EmailAddress!): Location
	createOption(menuItemId: ID!, title: String!, maxSelections: Int!, required: Boolean!, priority: Int!): Option
	createMenuCategory(name: String!): MenuCategory
	createOptionValue(optionId: ID!, title: String!, price: Int, isDefault: Boolean!, priority: Int!): OptionValue
  uploadMenuItemPicture(file: Upload!, menuItemId: ID!): MenuItem
  updateUser(password: String!, email: EmailAddress!, name: String!): User
	updateMenuItem(menuItemId: ID!, title: String!, description: String!, url: URL!, price: Int!, menuItemToUpsell: ID): MenuItem
	updateOrder(orderId: ID!, status: MealStatus!): Order
	updateLocation(locationId: ID!, address: String!, email: EmailAddress!, phoneNumber: PhoneNumber!): Location
	updateMenuCategory(name: String!): MenuCategory
	updateOption(optionId: ID!, title: String!, maxSelections: Int!, required: Boolean!, priority: Int!): Option
	deleteUser: User
	deleteOrder(orderId: ID!): Order
	deleteOptionValue(optionValueId: ID!): OptionValue
	deleteLocation(locationId: ID!): Location
	deleteMenuItem(menuItemId: ID!): MenuItem
	signup(email: String!, password: String!, name: String!, pictureURL: URL): AuthPayload
  login(email: String!, password: String!): AuthPayload
	purchase(deviceId: ID!, amountInCents: Int!): paymentObject
	sendMessage: paymentObject
}

type User {
  id: ID!
  email: EmailAddress! 
	paymentProcessorMerchantId: ID!
	paymentProcessorAccessToken: ID
	password: String!
	pictureURL: URL!
	name: String!
  menuItems: [MenuItem]!
	locations: [Location]!
	tabletDevices: [TabletDevice]!
	menuCategories: [MenuCategory]! 
	createdAt: DateTime!
}

type MenuItem {
  id: ID!
  title: String!
	description: String!
  price: Int!
	pictureURL: URL!
	calories: Int!
  author: User!
	options: [Option]!
	categories: [MenuCategory]!
	menuItemToUpsell: MenuItem
	createdAt: DateTime!
}


type Location {
	id: ID!
	address: String!
	phoneNumber: PhoneNumber
	email: EmailAddress
	owner: User!
	createdAt: DateTime!
}

type Order {
	id: ID!
	menuItem: MenuItem!
	options: [Option]!
	location: Location!
	status: MealStatus!
	createdAt: DateTime!
}

type Transaction {
	id: ID!
	location: Location!
	menuItem: MenuItem!
	createdAt: DateTime!
}

type MenuCategory {
	id: ID!
	owner: User!
	name: String!
	createdAt: DateTime!
}

type Option {
  id: ID!
  menuItem: MenuItem!
	title: String!
  maxSelections: Int!
	required: Boolean!
	priority: Int!
	optionValues: [OptionValue!]!
	createdAt: DateTime!
}

type OptionValue {
  id: ID!
  option: Option!
  title: String!
  price: Int
  isDefault: Boolean!
	pictureURL: URL
  priority: Int!
  createdAt: DateTime!
}

type AuthPayload {
  token: String
  user: User
}

type paymentObject {
  code: String
}

type TabletDevice {
  id: ID!
  headerId: String!
	paymentProcessingDevice: PaymentProcessingDevice!
}

type PaymentProcessingDevice {
	id: ID!
	deviceId: String!
	paymentProcessor: PaymentProcessor!
}

enum MealStatus {
  ORDERED
  INPREPERATION
  DONE
	CANCELLED
}

enum PaymentProcessor {
	CLOVER
	SQUARE
}

enum TransactionOrderByInput {
  createdAt_ASC
  createdAt_DESC
}


enum OptionOrderByInput {
  priority_ASC
  priority_DESC
}

enum OptionValueOrderByInput {
  priority_ASC
  priority_DESC
}

scalar DateTime

scalar EmailAddress

scalar PhoneNumber

scalar URL

scalar Upload
