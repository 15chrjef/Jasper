// Code generated by Prisma (prisma@1.23.0-test.3). DO NOT EDIT.
  // Please don't change this file manually but run `prisma generate` to update it.
  // For more information, please read the docs: https://www.prisma.io/docs/prisma-client/

export const typeDefs = /* GraphQL */ `type AggregateMenuItem {
  count: Int!
}

type AggregateUser {
  count: Int!
}

type BatchPayload {
  count: Long!
}

scalar Long

type MenuItem {
  id: ID!
  title: String!
  price: Float!
  pictureURL: String!
  published: Boolean!
  author: User
}

type MenuItemConnection {
  pageInfo: PageInfo!
  edges: [MenuItemEdge]!
  aggregate: AggregateMenuItem!
}

input MenuItemCreateInput {
  id: ID
  title: String!
  price: Float!
  pictureURL: String!
  published: Boolean
  author: UserCreateOneWithoutMenuItemsInput
}

input MenuItemCreateManyWithoutAuthorInput {
  create: [MenuItemCreateWithoutAuthorInput!]
  connect: [MenuItemWhereUniqueInput!]
}

input MenuItemCreateWithoutAuthorInput {
  id: ID
  title: String!
  price: Float!
  pictureURL: String!
  published: Boolean
}

type MenuItemEdge {
  node: MenuItem!
  cursor: String!
}

enum MenuItemOrderByInput {
  id_ASC
  id_DESC
  title_ASC
  title_DESC
  price_ASC
  price_DESC
  pictureURL_ASC
  pictureURL_DESC
  published_ASC
  published_DESC
}

type MenuItemPreviousValues {
  id: ID!
  title: String!
  price: Float!
  pictureURL: String!
  published: Boolean!
}

input MenuItemScalarWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  title: String
  title_not: String
  title_in: [String!]
  title_not_in: [String!]
  title_lt: String
  title_lte: String
  title_gt: String
  title_gte: String
  title_contains: String
  title_not_contains: String
  title_starts_with: String
  title_not_starts_with: String
  title_ends_with: String
  title_not_ends_with: String
  price: Float
  price_not: Float
  price_in: [Float!]
  price_not_in: [Float!]
  price_lt: Float
  price_lte: Float
  price_gt: Float
  price_gte: Float
  pictureURL: String
  pictureURL_not: String
  pictureURL_in: [String!]
  pictureURL_not_in: [String!]
  pictureURL_lt: String
  pictureURL_lte: String
  pictureURL_gt: String
  pictureURL_gte: String
  pictureURL_contains: String
  pictureURL_not_contains: String
  pictureURL_starts_with: String
  pictureURL_not_starts_with: String
  pictureURL_ends_with: String
  pictureURL_not_ends_with: String
  published: Boolean
  published_not: Boolean
  AND: [MenuItemScalarWhereInput!]
  OR: [MenuItemScalarWhereInput!]
  NOT: [MenuItemScalarWhereInput!]
}

type MenuItemSubscriptionPayload {
  mutation: MutationType!
  node: MenuItem
  updatedFields: [String!]
  previousValues: MenuItemPreviousValues
}

input MenuItemSubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: MenuItemWhereInput
  AND: [MenuItemSubscriptionWhereInput!]
  OR: [MenuItemSubscriptionWhereInput!]
  NOT: [MenuItemSubscriptionWhereInput!]
}

input MenuItemUpdateInput {
  title: String
  price: Float
  pictureURL: String
  published: Boolean
  author: UserUpdateOneWithoutMenuItemsInput
}

input MenuItemUpdateManyDataInput {
  title: String
  price: Float
  pictureURL: String
  published: Boolean
}

input MenuItemUpdateManyMutationInput {
  title: String
  price: Float
  pictureURL: String
  published: Boolean
}

input MenuItemUpdateManyWithoutAuthorInput {
  create: [MenuItemCreateWithoutAuthorInput!]
  delete: [MenuItemWhereUniqueInput!]
  connect: [MenuItemWhereUniqueInput!]
  set: [MenuItemWhereUniqueInput!]
  disconnect: [MenuItemWhereUniqueInput!]
  update: [MenuItemUpdateWithWhereUniqueWithoutAuthorInput!]
  upsert: [MenuItemUpsertWithWhereUniqueWithoutAuthorInput!]
  deleteMany: [MenuItemScalarWhereInput!]
  updateMany: [MenuItemUpdateManyWithWhereNestedInput!]
}

input MenuItemUpdateManyWithWhereNestedInput {
  where: MenuItemScalarWhereInput!
  data: MenuItemUpdateManyDataInput!
}

input MenuItemUpdateWithoutAuthorDataInput {
  title: String
  price: Float
  pictureURL: String
  published: Boolean
}

input MenuItemUpdateWithWhereUniqueWithoutAuthorInput {
  where: MenuItemWhereUniqueInput!
  data: MenuItemUpdateWithoutAuthorDataInput!
}

input MenuItemUpsertWithWhereUniqueWithoutAuthorInput {
  where: MenuItemWhereUniqueInput!
  update: MenuItemUpdateWithoutAuthorDataInput!
  create: MenuItemCreateWithoutAuthorInput!
}

input MenuItemWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  title: String
  title_not: String
  title_in: [String!]
  title_not_in: [String!]
  title_lt: String
  title_lte: String
  title_gt: String
  title_gte: String
  title_contains: String
  title_not_contains: String
  title_starts_with: String
  title_not_starts_with: String
  title_ends_with: String
  title_not_ends_with: String
  price: Float
  price_not: Float
  price_in: [Float!]
  price_not_in: [Float!]
  price_lt: Float
  price_lte: Float
  price_gt: Float
  price_gte: Float
  pictureURL: String
  pictureURL_not: String
  pictureURL_in: [String!]
  pictureURL_not_in: [String!]
  pictureURL_lt: String
  pictureURL_lte: String
  pictureURL_gt: String
  pictureURL_gte: String
  pictureURL_contains: String
  pictureURL_not_contains: String
  pictureURL_starts_with: String
  pictureURL_not_starts_with: String
  pictureURL_ends_with: String
  pictureURL_not_ends_with: String
  published: Boolean
  published_not: Boolean
  author: UserWhereInput
  AND: [MenuItemWhereInput!]
  OR: [MenuItemWhereInput!]
  NOT: [MenuItemWhereInput!]
}

input MenuItemWhereUniqueInput {
  id: ID
}

type Mutation {
  createMenuItem(data: MenuItemCreateInput!): MenuItem!
  updateMenuItem(data: MenuItemUpdateInput!, where: MenuItemWhereUniqueInput!): MenuItem
  updateManyMenuItems(data: MenuItemUpdateManyMutationInput!, where: MenuItemWhereInput): BatchPayload!
  upsertMenuItem(where: MenuItemWhereUniqueInput!, create: MenuItemCreateInput!, update: MenuItemUpdateInput!): MenuItem!
  deleteMenuItem(where: MenuItemWhereUniqueInput!): MenuItem
  deleteManyMenuItems(where: MenuItemWhereInput): BatchPayload!
  createUser(data: UserCreateInput!): User!
  updateUser(data: UserUpdateInput!, where: UserWhereUniqueInput!): User
  updateManyUsers(data: UserUpdateManyMutationInput!, where: UserWhereInput): BatchPayload!
  upsertUser(where: UserWhereUniqueInput!, create: UserCreateInput!, update: UserUpdateInput!): User!
  deleteUser(where: UserWhereUniqueInput!): User
  deleteManyUsers(where: UserWhereInput): BatchPayload!
}

enum MutationType {
  CREATED
  UPDATED
  DELETED
}

interface Node {
  id: ID!
}

type PageInfo {
  hasNextPage: Boolean!
  hasPreviousPage: Boolean!
  startCursor: String
  endCursor: String
}

type Query {
  menuItem(where: MenuItemWhereUniqueInput!): MenuItem
  menuItems(where: MenuItemWhereInput, orderBy: MenuItemOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [MenuItem]!
  menuItemsConnection(where: MenuItemWhereInput, orderBy: MenuItemOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): MenuItemConnection!
  user(where: UserWhereUniqueInput!): User
  users(where: UserWhereInput, orderBy: UserOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [User]!
  usersConnection(where: UserWhereInput, orderBy: UserOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): UserConnection!
  node(id: ID!): Node
}

type Subscription {
  menuItem(where: MenuItemSubscriptionWhereInput): MenuItemSubscriptionPayload
  user(where: UserSubscriptionWhereInput): UserSubscriptionPayload
}

type User {
  id: ID!
  email: String
  password: String!
  name: String!
  menuItems(where: MenuItemWhereInput, orderBy: MenuItemOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [MenuItem!]
}

type UserConnection {
  pageInfo: PageInfo!
  edges: [UserEdge]!
  aggregate: AggregateUser!
}

input UserCreateInput {
  id: ID
  email: String
  password: String!
  name: String!
  menuItems: MenuItemCreateManyWithoutAuthorInput
}

input UserCreateOneWithoutMenuItemsInput {
  create: UserCreateWithoutMenuItemsInput
  connect: UserWhereUniqueInput
}

input UserCreateWithoutMenuItemsInput {
  id: ID
  email: String
  password: String!
  name: String!
}

type UserEdge {
  node: User!
  cursor: String!
}

enum UserOrderByInput {
  id_ASC
  id_DESC
  email_ASC
  email_DESC
  password_ASC
  password_DESC
  name_ASC
  name_DESC
}

type UserPreviousValues {
  id: ID!
  email: String
  password: String!
  name: String!
}

type UserSubscriptionPayload {
  mutation: MutationType!
  node: User
  updatedFields: [String!]
  previousValues: UserPreviousValues
}

input UserSubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: UserWhereInput
  AND: [UserSubscriptionWhereInput!]
  OR: [UserSubscriptionWhereInput!]
  NOT: [UserSubscriptionWhereInput!]
}

input UserUpdateInput {
  email: String
  password: String
  name: String
  menuItems: MenuItemUpdateManyWithoutAuthorInput
}

input UserUpdateManyMutationInput {
  email: String
  password: String
  name: String
}

input UserUpdateOneWithoutMenuItemsInput {
  create: UserCreateWithoutMenuItemsInput
  update: UserUpdateWithoutMenuItemsDataInput
  upsert: UserUpsertWithoutMenuItemsInput
  delete: Boolean
  disconnect: Boolean
  connect: UserWhereUniqueInput
}

input UserUpdateWithoutMenuItemsDataInput {
  email: String
  password: String
  name: String
}

input UserUpsertWithoutMenuItemsInput {
  update: UserUpdateWithoutMenuItemsDataInput!
  create: UserCreateWithoutMenuItemsInput!
}

input UserWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  email: String
  email_not: String
  email_in: [String!]
  email_not_in: [String!]
  email_lt: String
  email_lte: String
  email_gt: String
  email_gte: String
  email_contains: String
  email_not_contains: String
  email_starts_with: String
  email_not_starts_with: String
  email_ends_with: String
  email_not_ends_with: String
  password: String
  password_not: String
  password_in: [String!]
  password_not_in: [String!]
  password_lt: String
  password_lte: String
  password_gt: String
  password_gte: String
  password_contains: String
  password_not_contains: String
  password_starts_with: String
  password_not_starts_with: String
  password_ends_with: String
  password_not_ends_with: String
  name: String
  name_not: String
  name_in: [String!]
  name_not_in: [String!]
  name_lt: String
  name_lte: String
  name_gt: String
  name_gte: String
  name_contains: String
  name_not_contains: String
  name_starts_with: String
  name_not_starts_with: String
  name_ends_with: String
  name_not_ends_with: String
  menuItems_every: MenuItemWhereInput
  menuItems_some: MenuItemWhereInput
  menuItems_none: MenuItemWhereInput
  AND: [UserWhereInput!]
  OR: [UserWhereInput!]
  NOT: [UserWhereInput!]
}

input UserWhereUniqueInput {
  id: ID
  email: String
}
`