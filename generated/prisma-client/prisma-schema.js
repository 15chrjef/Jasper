module.exports = {
        typeDefs: // Code generated by Prisma (prisma@1.23.0-test.3). DO NOT EDIT.
  // Please don't change this file manually but run `prisma generate` to update it.
  // For more information, please read the docs: https://www.prisma.io/docs/prisma-client/

/* GraphQL */ `type AggregateIngredient {
  count: Int!
}

type AggregateLocation {
  count: Int!
}

type AggregateMenuCategory {
  count: Int!
}

type AggregateMenuItem {
  count: Int!
}

type AggregateOrder {
  count: Int!
}

type AggregateTransaction {
  count: Int!
}

type AggregateUser {
  count: Int!
}

type BatchPayload {
  count: Long!
}

scalar DateTime

type Ingredient {
  id: ID!
  menuItem: MenuItem!
  name: String!
  status: IngredientStatus!
  price: Float
  createdAt: DateTime!
  deletedAt: DateTime
}

type IngredientConnection {
  pageInfo: PageInfo!
  edges: [IngredientEdge]!
  aggregate: AggregateIngredient!
}

input IngredientCreateInput {
  id: ID
  menuItem: MenuItemCreateOneWithoutIngredientsInput!
  name: String!
  status: IngredientStatus!
  price: Float
  deletedAt: DateTime
}

input IngredientCreateManyInput {
  create: [IngredientCreateInput!]
  connect: [IngredientWhereUniqueInput!]
}

input IngredientCreateManyWithoutMenuItemInput {
  create: [IngredientCreateWithoutMenuItemInput!]
  connect: [IngredientWhereUniqueInput!]
}

input IngredientCreateWithoutMenuItemInput {
  id: ID
  name: String!
  status: IngredientStatus!
  price: Float
  deletedAt: DateTime
}

type IngredientEdge {
  node: Ingredient!
  cursor: String!
}

enum IngredientOrderByInput {
  id_ASC
  id_DESC
  name_ASC
  name_DESC
  status_ASC
  status_DESC
  price_ASC
  price_DESC
  createdAt_ASC
  createdAt_DESC
  deletedAt_ASC
  deletedAt_DESC
}

type IngredientPreviousValues {
  id: ID!
  name: String!
  status: IngredientStatus!
  price: Float
  createdAt: DateTime!
  deletedAt: DateTime
}

input IngredientScalarWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  name: String
  name_not: String
  name_in: [String!]
  name_not_in: [String!]
  name_lt: String
  name_lte: String
  name_gt: String
  name_gte: String
  name_contains: String
  name_not_contains: String
  name_starts_with: String
  name_not_starts_with: String
  name_ends_with: String
  name_not_ends_with: String
  status: IngredientStatus
  status_not: IngredientStatus
  status_in: [IngredientStatus!]
  status_not_in: [IngredientStatus!]
  price: Float
  price_not: Float
  price_in: [Float!]
  price_not_in: [Float!]
  price_lt: Float
  price_lte: Float
  price_gt: Float
  price_gte: Float
  createdAt: DateTime
  createdAt_not: DateTime
  createdAt_in: [DateTime!]
  createdAt_not_in: [DateTime!]
  createdAt_lt: DateTime
  createdAt_lte: DateTime
  createdAt_gt: DateTime
  createdAt_gte: DateTime
  deletedAt: DateTime
  deletedAt_not: DateTime
  deletedAt_in: [DateTime!]
  deletedAt_not_in: [DateTime!]
  deletedAt_lt: DateTime
  deletedAt_lte: DateTime
  deletedAt_gt: DateTime
  deletedAt_gte: DateTime
  AND: [IngredientScalarWhereInput!]
  OR: [IngredientScalarWhereInput!]
  NOT: [IngredientScalarWhereInput!]
}

enum IngredientStatus {
  DEFAULT_IN_ITEM
  FREE_ADD_ONN
  PAYED_ADD_ONN
}

type IngredientSubscriptionPayload {
  mutation: MutationType!
  node: Ingredient
  updatedFields: [String!]
  previousValues: IngredientPreviousValues
}

input IngredientSubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: IngredientWhereInput
  AND: [IngredientSubscriptionWhereInput!]
  OR: [IngredientSubscriptionWhereInput!]
  NOT: [IngredientSubscriptionWhereInput!]
}

input IngredientUpdateDataInput {
  menuItem: MenuItemUpdateOneRequiredWithoutIngredientsInput
  name: String
  status: IngredientStatus
  price: Float
  deletedAt: DateTime
}

input IngredientUpdateInput {
  menuItem: MenuItemUpdateOneRequiredWithoutIngredientsInput
  name: String
  status: IngredientStatus
  price: Float
  deletedAt: DateTime
}

input IngredientUpdateManyDataInput {
  name: String
  status: IngredientStatus
  price: Float
  deletedAt: DateTime
}

input IngredientUpdateManyInput {
  create: [IngredientCreateInput!]
  update: [IngredientUpdateWithWhereUniqueNestedInput!]
  upsert: [IngredientUpsertWithWhereUniqueNestedInput!]
  delete: [IngredientWhereUniqueInput!]
  connect: [IngredientWhereUniqueInput!]
  set: [IngredientWhereUniqueInput!]
  disconnect: [IngredientWhereUniqueInput!]
  deleteMany: [IngredientScalarWhereInput!]
  updateMany: [IngredientUpdateManyWithWhereNestedInput!]
}

input IngredientUpdateManyMutationInput {
  name: String
  status: IngredientStatus
  price: Float
  deletedAt: DateTime
}

input IngredientUpdateManyWithoutMenuItemInput {
  create: [IngredientCreateWithoutMenuItemInput!]
  delete: [IngredientWhereUniqueInput!]
  connect: [IngredientWhereUniqueInput!]
  set: [IngredientWhereUniqueInput!]
  disconnect: [IngredientWhereUniqueInput!]
  update: [IngredientUpdateWithWhereUniqueWithoutMenuItemInput!]
  upsert: [IngredientUpsertWithWhereUniqueWithoutMenuItemInput!]
  deleteMany: [IngredientScalarWhereInput!]
  updateMany: [IngredientUpdateManyWithWhereNestedInput!]
}

input IngredientUpdateManyWithWhereNestedInput {
  where: IngredientScalarWhereInput!
  data: IngredientUpdateManyDataInput!
}

input IngredientUpdateWithoutMenuItemDataInput {
  name: String
  status: IngredientStatus
  price: Float
  deletedAt: DateTime
}

input IngredientUpdateWithWhereUniqueNestedInput {
  where: IngredientWhereUniqueInput!
  data: IngredientUpdateDataInput!
}

input IngredientUpdateWithWhereUniqueWithoutMenuItemInput {
  where: IngredientWhereUniqueInput!
  data: IngredientUpdateWithoutMenuItemDataInput!
}

input IngredientUpsertWithWhereUniqueNestedInput {
  where: IngredientWhereUniqueInput!
  update: IngredientUpdateDataInput!
  create: IngredientCreateInput!
}

input IngredientUpsertWithWhereUniqueWithoutMenuItemInput {
  where: IngredientWhereUniqueInput!
  update: IngredientUpdateWithoutMenuItemDataInput!
  create: IngredientCreateWithoutMenuItemInput!
}

input IngredientWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  menuItem: MenuItemWhereInput
  name: String
  name_not: String
  name_in: [String!]
  name_not_in: [String!]
  name_lt: String
  name_lte: String
  name_gt: String
  name_gte: String
  name_contains: String
  name_not_contains: String
  name_starts_with: String
  name_not_starts_with: String
  name_ends_with: String
  name_not_ends_with: String
  status: IngredientStatus
  status_not: IngredientStatus
  status_in: [IngredientStatus!]
  status_not_in: [IngredientStatus!]
  price: Float
  price_not: Float
  price_in: [Float!]
  price_not_in: [Float!]
  price_lt: Float
  price_lte: Float
  price_gt: Float
  price_gte: Float
  createdAt: DateTime
  createdAt_not: DateTime
  createdAt_in: [DateTime!]
  createdAt_not_in: [DateTime!]
  createdAt_lt: DateTime
  createdAt_lte: DateTime
  createdAt_gt: DateTime
  createdAt_gte: DateTime
  deletedAt: DateTime
  deletedAt_not: DateTime
  deletedAt_in: [DateTime!]
  deletedAt_not_in: [DateTime!]
  deletedAt_lt: DateTime
  deletedAt_lte: DateTime
  deletedAt_gt: DateTime
  deletedAt_gte: DateTime
  AND: [IngredientWhereInput!]
  OR: [IngredientWhereInput!]
  NOT: [IngredientWhereInput!]
}

input IngredientWhereUniqueInput {
  id: ID
}

type Location {
  id: ID!
  address: String!
  phoneNumber: String!
  email: String!
  owner: User!
  transactions(where: TransactionWhereInput, orderBy: TransactionOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Transaction!]
  orders(where: OrderWhereInput, orderBy: OrderOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Order!]
  createdAt: DateTime!
  deletedAt: DateTime
}

type LocationConnection {
  pageInfo: PageInfo!
  edges: [LocationEdge]!
  aggregate: AggregateLocation!
}

input LocationCreateInput {
  id: ID
  address: String!
  phoneNumber: String!
  email: String!
  owner: UserCreateOneWithoutLocationsInput!
  transactions: TransactionCreateManyWithoutLocationInput
  orders: OrderCreateManyWithoutLocationInput
  deletedAt: DateTime
}

input LocationCreateManyWithoutOwnerInput {
  create: [LocationCreateWithoutOwnerInput!]
  connect: [LocationWhereUniqueInput!]
}

input LocationCreateOneWithoutOrdersInput {
  create: LocationCreateWithoutOrdersInput
  connect: LocationWhereUniqueInput
}

input LocationCreateOneWithoutTransactionsInput {
  create: LocationCreateWithoutTransactionsInput
  connect: LocationWhereUniqueInput
}

input LocationCreateWithoutOrdersInput {
  id: ID
  address: String!
  phoneNumber: String!
  email: String!
  owner: UserCreateOneWithoutLocationsInput!
  transactions: TransactionCreateManyWithoutLocationInput
  deletedAt: DateTime
}

input LocationCreateWithoutOwnerInput {
  id: ID
  address: String!
  phoneNumber: String!
  email: String!
  transactions: TransactionCreateManyWithoutLocationInput
  orders: OrderCreateManyWithoutLocationInput
  deletedAt: DateTime
}

input LocationCreateWithoutTransactionsInput {
  id: ID
  address: String!
  phoneNumber: String!
  email: String!
  owner: UserCreateOneWithoutLocationsInput!
  orders: OrderCreateManyWithoutLocationInput
  deletedAt: DateTime
}

type LocationEdge {
  node: Location!
  cursor: String!
}

enum LocationOrderByInput {
  id_ASC
  id_DESC
  address_ASC
  address_DESC
  phoneNumber_ASC
  phoneNumber_DESC
  email_ASC
  email_DESC
  createdAt_ASC
  createdAt_DESC
  deletedAt_ASC
  deletedAt_DESC
}

type LocationPreviousValues {
  id: ID!
  address: String!
  phoneNumber: String!
  email: String!
  createdAt: DateTime!
  deletedAt: DateTime
}

input LocationScalarWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  address: String
  address_not: String
  address_in: [String!]
  address_not_in: [String!]
  address_lt: String
  address_lte: String
  address_gt: String
  address_gte: String
  address_contains: String
  address_not_contains: String
  address_starts_with: String
  address_not_starts_with: String
  address_ends_with: String
  address_not_ends_with: String
  phoneNumber: String
  phoneNumber_not: String
  phoneNumber_in: [String!]
  phoneNumber_not_in: [String!]
  phoneNumber_lt: String
  phoneNumber_lte: String
  phoneNumber_gt: String
  phoneNumber_gte: String
  phoneNumber_contains: String
  phoneNumber_not_contains: String
  phoneNumber_starts_with: String
  phoneNumber_not_starts_with: String
  phoneNumber_ends_with: String
  phoneNumber_not_ends_with: String
  email: String
  email_not: String
  email_in: [String!]
  email_not_in: [String!]
  email_lt: String
  email_lte: String
  email_gt: String
  email_gte: String
  email_contains: String
  email_not_contains: String
  email_starts_with: String
  email_not_starts_with: String
  email_ends_with: String
  email_not_ends_with: String
  createdAt: DateTime
  createdAt_not: DateTime
  createdAt_in: [DateTime!]
  createdAt_not_in: [DateTime!]
  createdAt_lt: DateTime
  createdAt_lte: DateTime
  createdAt_gt: DateTime
  createdAt_gte: DateTime
  deletedAt: DateTime
  deletedAt_not: DateTime
  deletedAt_in: [DateTime!]
  deletedAt_not_in: [DateTime!]
  deletedAt_lt: DateTime
  deletedAt_lte: DateTime
  deletedAt_gt: DateTime
  deletedAt_gte: DateTime
  AND: [LocationScalarWhereInput!]
  OR: [LocationScalarWhereInput!]
  NOT: [LocationScalarWhereInput!]
}

type LocationSubscriptionPayload {
  mutation: MutationType!
  node: Location
  updatedFields: [String!]
  previousValues: LocationPreviousValues
}

input LocationSubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: LocationWhereInput
  AND: [LocationSubscriptionWhereInput!]
  OR: [LocationSubscriptionWhereInput!]
  NOT: [LocationSubscriptionWhereInput!]
}

input LocationUpdateInput {
  address: String
  phoneNumber: String
  email: String
  owner: UserUpdateOneRequiredWithoutLocationsInput
  transactions: TransactionUpdateManyWithoutLocationInput
  orders: OrderUpdateManyWithoutLocationInput
  deletedAt: DateTime
}

input LocationUpdateManyDataInput {
  address: String
  phoneNumber: String
  email: String
  deletedAt: DateTime
}

input LocationUpdateManyMutationInput {
  address: String
  phoneNumber: String
  email: String
  deletedAt: DateTime
}

input LocationUpdateManyWithoutOwnerInput {
  create: [LocationCreateWithoutOwnerInput!]
  delete: [LocationWhereUniqueInput!]
  connect: [LocationWhereUniqueInput!]
  set: [LocationWhereUniqueInput!]
  disconnect: [LocationWhereUniqueInput!]
  update: [LocationUpdateWithWhereUniqueWithoutOwnerInput!]
  upsert: [LocationUpsertWithWhereUniqueWithoutOwnerInput!]
  deleteMany: [LocationScalarWhereInput!]
  updateMany: [LocationUpdateManyWithWhereNestedInput!]
}

input LocationUpdateManyWithWhereNestedInput {
  where: LocationScalarWhereInput!
  data: LocationUpdateManyDataInput!
}

input LocationUpdateOneRequiredWithoutOrdersInput {
  create: LocationCreateWithoutOrdersInput
  update: LocationUpdateWithoutOrdersDataInput
  upsert: LocationUpsertWithoutOrdersInput
  connect: LocationWhereUniqueInput
}

input LocationUpdateOneRequiredWithoutTransactionsInput {
  create: LocationCreateWithoutTransactionsInput
  update: LocationUpdateWithoutTransactionsDataInput
  upsert: LocationUpsertWithoutTransactionsInput
  connect: LocationWhereUniqueInput
}

input LocationUpdateWithoutOrdersDataInput {
  address: String
  phoneNumber: String
  email: String
  owner: UserUpdateOneRequiredWithoutLocationsInput
  transactions: TransactionUpdateManyWithoutLocationInput
  deletedAt: DateTime
}

input LocationUpdateWithoutOwnerDataInput {
  address: String
  phoneNumber: String
  email: String
  transactions: TransactionUpdateManyWithoutLocationInput
  orders: OrderUpdateManyWithoutLocationInput
  deletedAt: DateTime
}

input LocationUpdateWithoutTransactionsDataInput {
  address: String
  phoneNumber: String
  email: String
  owner: UserUpdateOneRequiredWithoutLocationsInput
  orders: OrderUpdateManyWithoutLocationInput
  deletedAt: DateTime
}

input LocationUpdateWithWhereUniqueWithoutOwnerInput {
  where: LocationWhereUniqueInput!
  data: LocationUpdateWithoutOwnerDataInput!
}

input LocationUpsertWithoutOrdersInput {
  update: LocationUpdateWithoutOrdersDataInput!
  create: LocationCreateWithoutOrdersInput!
}

input LocationUpsertWithoutTransactionsInput {
  update: LocationUpdateWithoutTransactionsDataInput!
  create: LocationCreateWithoutTransactionsInput!
}

input LocationUpsertWithWhereUniqueWithoutOwnerInput {
  where: LocationWhereUniqueInput!
  update: LocationUpdateWithoutOwnerDataInput!
  create: LocationCreateWithoutOwnerInput!
}

input LocationWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  address: String
  address_not: String
  address_in: [String!]
  address_not_in: [String!]
  address_lt: String
  address_lte: String
  address_gt: String
  address_gte: String
  address_contains: String
  address_not_contains: String
  address_starts_with: String
  address_not_starts_with: String
  address_ends_with: String
  address_not_ends_with: String
  phoneNumber: String
  phoneNumber_not: String
  phoneNumber_in: [String!]
  phoneNumber_not_in: [String!]
  phoneNumber_lt: String
  phoneNumber_lte: String
  phoneNumber_gt: String
  phoneNumber_gte: String
  phoneNumber_contains: String
  phoneNumber_not_contains: String
  phoneNumber_starts_with: String
  phoneNumber_not_starts_with: String
  phoneNumber_ends_with: String
  phoneNumber_not_ends_with: String
  email: String
  email_not: String
  email_in: [String!]
  email_not_in: [String!]
  email_lt: String
  email_lte: String
  email_gt: String
  email_gte: String
  email_contains: String
  email_not_contains: String
  email_starts_with: String
  email_not_starts_with: String
  email_ends_with: String
  email_not_ends_with: String
  owner: UserWhereInput
  transactions_every: TransactionWhereInput
  transactions_some: TransactionWhereInput
  transactions_none: TransactionWhereInput
  orders_every: OrderWhereInput
  orders_some: OrderWhereInput
  orders_none: OrderWhereInput
  createdAt: DateTime
  createdAt_not: DateTime
  createdAt_in: [DateTime!]
  createdAt_not_in: [DateTime!]
  createdAt_lt: DateTime
  createdAt_lte: DateTime
  createdAt_gt: DateTime
  createdAt_gte: DateTime
  deletedAt: DateTime
  deletedAt_not: DateTime
  deletedAt_in: [DateTime!]
  deletedAt_not_in: [DateTime!]
  deletedAt_lt: DateTime
  deletedAt_lte: DateTime
  deletedAt_gt: DateTime
  deletedAt_gte: DateTime
  AND: [LocationWhereInput!]
  OR: [LocationWhereInput!]
  NOT: [LocationWhereInput!]
}

input LocationWhereUniqueInput {
  id: ID
}

scalar Long

enum MealStatus {
  ORDERED
  PREPARING
  DONE
  CANCELLED
}

type MenuCategory {
  id: ID!
  owner: User!
  menuItems(where: MenuItemWhereInput, orderBy: MenuItemOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [MenuItem!]
  name: String!
  createdAt: DateTime!
  deletedAt: DateTime
}

type MenuCategoryConnection {
  pageInfo: PageInfo!
  edges: [MenuCategoryEdge]!
  aggregate: AggregateMenuCategory!
}

input MenuCategoryCreateInput {
  id: ID
  owner: UserCreateOneWithoutMenuCategoriesInput!
  menuItems: MenuItemCreateManyWithoutCategoryInput
  name: String!
  deletedAt: DateTime
}

input MenuCategoryCreateManyWithoutOwnerInput {
  create: [MenuCategoryCreateWithoutOwnerInput!]
  connect: [MenuCategoryWhereUniqueInput!]
}

input MenuCategoryCreateOneWithoutMenuItemsInput {
  create: MenuCategoryCreateWithoutMenuItemsInput
  connect: MenuCategoryWhereUniqueInput
}

input MenuCategoryCreateWithoutMenuItemsInput {
  id: ID
  owner: UserCreateOneWithoutMenuCategoriesInput!
  name: String!
  deletedAt: DateTime
}

input MenuCategoryCreateWithoutOwnerInput {
  id: ID
  menuItems: MenuItemCreateManyWithoutCategoryInput
  name: String!
  deletedAt: DateTime
}

type MenuCategoryEdge {
  node: MenuCategory!
  cursor: String!
}

enum MenuCategoryOrderByInput {
  id_ASC
  id_DESC
  name_ASC
  name_DESC
  createdAt_ASC
  createdAt_DESC
  deletedAt_ASC
  deletedAt_DESC
}

type MenuCategoryPreviousValues {
  id: ID!
  name: String!
  createdAt: DateTime!
  deletedAt: DateTime
}

input MenuCategoryScalarWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  name: String
  name_not: String
  name_in: [String!]
  name_not_in: [String!]
  name_lt: String
  name_lte: String
  name_gt: String
  name_gte: String
  name_contains: String
  name_not_contains: String
  name_starts_with: String
  name_not_starts_with: String
  name_ends_with: String
  name_not_ends_with: String
  createdAt: DateTime
  createdAt_not: DateTime
  createdAt_in: [DateTime!]
  createdAt_not_in: [DateTime!]
  createdAt_lt: DateTime
  createdAt_lte: DateTime
  createdAt_gt: DateTime
  createdAt_gte: DateTime
  deletedAt: DateTime
  deletedAt_not: DateTime
  deletedAt_in: [DateTime!]
  deletedAt_not_in: [DateTime!]
  deletedAt_lt: DateTime
  deletedAt_lte: DateTime
  deletedAt_gt: DateTime
  deletedAt_gte: DateTime
  AND: [MenuCategoryScalarWhereInput!]
  OR: [MenuCategoryScalarWhereInput!]
  NOT: [MenuCategoryScalarWhereInput!]
}

type MenuCategorySubscriptionPayload {
  mutation: MutationType!
  node: MenuCategory
  updatedFields: [String!]
  previousValues: MenuCategoryPreviousValues
}

input MenuCategorySubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: MenuCategoryWhereInput
  AND: [MenuCategorySubscriptionWhereInput!]
  OR: [MenuCategorySubscriptionWhereInput!]
  NOT: [MenuCategorySubscriptionWhereInput!]
}

input MenuCategoryUpdateInput {
  owner: UserUpdateOneRequiredWithoutMenuCategoriesInput
  menuItems: MenuItemUpdateManyWithoutCategoryInput
  name: String
  deletedAt: DateTime
}

input MenuCategoryUpdateManyDataInput {
  name: String
  deletedAt: DateTime
}

input MenuCategoryUpdateManyMutationInput {
  name: String
  deletedAt: DateTime
}

input MenuCategoryUpdateManyWithoutOwnerInput {
  create: [MenuCategoryCreateWithoutOwnerInput!]
  delete: [MenuCategoryWhereUniqueInput!]
  connect: [MenuCategoryWhereUniqueInput!]
  set: [MenuCategoryWhereUniqueInput!]
  disconnect: [MenuCategoryWhereUniqueInput!]
  update: [MenuCategoryUpdateWithWhereUniqueWithoutOwnerInput!]
  upsert: [MenuCategoryUpsertWithWhereUniqueWithoutOwnerInput!]
  deleteMany: [MenuCategoryScalarWhereInput!]
  updateMany: [MenuCategoryUpdateManyWithWhereNestedInput!]
}

input MenuCategoryUpdateManyWithWhereNestedInput {
  where: MenuCategoryScalarWhereInput!
  data: MenuCategoryUpdateManyDataInput!
}

input MenuCategoryUpdateOneWithoutMenuItemsInput {
  create: MenuCategoryCreateWithoutMenuItemsInput
  update: MenuCategoryUpdateWithoutMenuItemsDataInput
  upsert: MenuCategoryUpsertWithoutMenuItemsInput
  delete: Boolean
  disconnect: Boolean
  connect: MenuCategoryWhereUniqueInput
}

input MenuCategoryUpdateWithoutMenuItemsDataInput {
  owner: UserUpdateOneRequiredWithoutMenuCategoriesInput
  name: String
  deletedAt: DateTime
}

input MenuCategoryUpdateWithoutOwnerDataInput {
  menuItems: MenuItemUpdateManyWithoutCategoryInput
  name: String
  deletedAt: DateTime
}

input MenuCategoryUpdateWithWhereUniqueWithoutOwnerInput {
  where: MenuCategoryWhereUniqueInput!
  data: MenuCategoryUpdateWithoutOwnerDataInput!
}

input MenuCategoryUpsertWithoutMenuItemsInput {
  update: MenuCategoryUpdateWithoutMenuItemsDataInput!
  create: MenuCategoryCreateWithoutMenuItemsInput!
}

input MenuCategoryUpsertWithWhereUniqueWithoutOwnerInput {
  where: MenuCategoryWhereUniqueInput!
  update: MenuCategoryUpdateWithoutOwnerDataInput!
  create: MenuCategoryCreateWithoutOwnerInput!
}

input MenuCategoryWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  owner: UserWhereInput
  menuItems_every: MenuItemWhereInput
  menuItems_some: MenuItemWhereInput
  menuItems_none: MenuItemWhereInput
  name: String
  name_not: String
  name_in: [String!]
  name_not_in: [String!]
  name_lt: String
  name_lte: String
  name_gt: String
  name_gte: String
  name_contains: String
  name_not_contains: String
  name_starts_with: String
  name_not_starts_with: String
  name_ends_with: String
  name_not_ends_with: String
  createdAt: DateTime
  createdAt_not: DateTime
  createdAt_in: [DateTime!]
  createdAt_not_in: [DateTime!]
  createdAt_lt: DateTime
  createdAt_lte: DateTime
  createdAt_gt: DateTime
  createdAt_gte: DateTime
  deletedAt: DateTime
  deletedAt_not: DateTime
  deletedAt_in: [DateTime!]
  deletedAt_not_in: [DateTime!]
  deletedAt_lt: DateTime
  deletedAt_lte: DateTime
  deletedAt_gt: DateTime
  deletedAt_gte: DateTime
  AND: [MenuCategoryWhereInput!]
  OR: [MenuCategoryWhereInput!]
  NOT: [MenuCategoryWhereInput!]
}

input MenuCategoryWhereUniqueInput {
  id: ID
}

type MenuItem {
  id: ID!
  title: String!
  description: String!
  price: Float!
  pictureURL: String!
  author: User
  orders(where: OrderWhereInput, orderBy: OrderOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Order!]
  transactions(where: TransactionWhereInput, orderBy: TransactionOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Transaction!]
  ingredients(where: IngredientWhereInput, orderBy: IngredientOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Ingredient!]
  menuItemToUpsell: MenuItem
  category: MenuCategory
  createdAt: DateTime!
  deletedAt: DateTime
}

type MenuItemConnection {
  pageInfo: PageInfo!
  edges: [MenuItemEdge]!
  aggregate: AggregateMenuItem!
}

input MenuItemCreateInput {
  id: ID
  title: String!
  description: String!
  price: Float!
  pictureURL: String!
  author: UserCreateOneWithoutMenuItemsInput
  orders: OrderCreateManyWithoutMenuItemInput
  transactions: TransactionCreateManyWithoutMenuItemInput
  ingredients: IngredientCreateManyWithoutMenuItemInput
  menuItemToUpsell: MenuItemCreateOneWithoutMenuItemToUpsellInput
  category: MenuCategoryCreateOneWithoutMenuItemsInput
  deletedAt: DateTime
}

input MenuItemCreateManyWithoutAuthorInput {
  create: [MenuItemCreateWithoutAuthorInput!]
  connect: [MenuItemWhereUniqueInput!]
}

input MenuItemCreateManyWithoutCategoryInput {
  create: [MenuItemCreateWithoutCategoryInput!]
  connect: [MenuItemWhereUniqueInput!]
}

input MenuItemCreateOneWithoutIngredientsInput {
  create: MenuItemCreateWithoutIngredientsInput
  connect: MenuItemWhereUniqueInput
}

input MenuItemCreateOneWithoutMenuItemToUpsellInput {
  create: MenuItemCreateWithoutMenuItemToUpsellInput
  connect: MenuItemWhereUniqueInput
}

input MenuItemCreateOneWithoutOrdersInput {
  create: MenuItemCreateWithoutOrdersInput
  connect: MenuItemWhereUniqueInput
}

input MenuItemCreateOneWithoutTransactionsInput {
  create: MenuItemCreateWithoutTransactionsInput
  connect: MenuItemWhereUniqueInput
}

input MenuItemCreateWithoutAuthorInput {
  id: ID
  title: String!
  description: String!
  price: Float!
  pictureURL: String!
  orders: OrderCreateManyWithoutMenuItemInput
  transactions: TransactionCreateManyWithoutMenuItemInput
  ingredients: IngredientCreateManyWithoutMenuItemInput
  menuItemToUpsell: MenuItemCreateOneWithoutMenuItemToUpsellInput
  category: MenuCategoryCreateOneWithoutMenuItemsInput
  deletedAt: DateTime
}

input MenuItemCreateWithoutCategoryInput {
  id: ID
  title: String!
  description: String!
  price: Float!
  pictureURL: String!
  author: UserCreateOneWithoutMenuItemsInput
  orders: OrderCreateManyWithoutMenuItemInput
  transactions: TransactionCreateManyWithoutMenuItemInput
  ingredients: IngredientCreateManyWithoutMenuItemInput
  menuItemToUpsell: MenuItemCreateOneWithoutMenuItemToUpsellInput
  deletedAt: DateTime
}

input MenuItemCreateWithoutIngredientsInput {
  id: ID
  title: String!
  description: String!
  price: Float!
  pictureURL: String!
  author: UserCreateOneWithoutMenuItemsInput
  orders: OrderCreateManyWithoutMenuItemInput
  transactions: TransactionCreateManyWithoutMenuItemInput
  menuItemToUpsell: MenuItemCreateOneWithoutMenuItemToUpsellInput
  category: MenuCategoryCreateOneWithoutMenuItemsInput
  deletedAt: DateTime
}

input MenuItemCreateWithoutMenuItemToUpsellInput {
  id: ID
  title: String!
  description: String!
  price: Float!
  pictureURL: String!
  author: UserCreateOneWithoutMenuItemsInput
  orders: OrderCreateManyWithoutMenuItemInput
  transactions: TransactionCreateManyWithoutMenuItemInput
  ingredients: IngredientCreateManyWithoutMenuItemInput
  category: MenuCategoryCreateOneWithoutMenuItemsInput
  deletedAt: DateTime
}

input MenuItemCreateWithoutOrdersInput {
  id: ID
  title: String!
  description: String!
  price: Float!
  pictureURL: String!
  author: UserCreateOneWithoutMenuItemsInput
  transactions: TransactionCreateManyWithoutMenuItemInput
  ingredients: IngredientCreateManyWithoutMenuItemInput
  menuItemToUpsell: MenuItemCreateOneWithoutMenuItemToUpsellInput
  category: MenuCategoryCreateOneWithoutMenuItemsInput
  deletedAt: DateTime
}

input MenuItemCreateWithoutTransactionsInput {
  id: ID
  title: String!
  description: String!
  price: Float!
  pictureURL: String!
  author: UserCreateOneWithoutMenuItemsInput
  orders: OrderCreateManyWithoutMenuItemInput
  ingredients: IngredientCreateManyWithoutMenuItemInput
  menuItemToUpsell: MenuItemCreateOneWithoutMenuItemToUpsellInput
  category: MenuCategoryCreateOneWithoutMenuItemsInput
  deletedAt: DateTime
}

type MenuItemEdge {
  node: MenuItem!
  cursor: String!
}

enum MenuItemOrderByInput {
  id_ASC
  id_DESC
  title_ASC
  title_DESC
  description_ASC
  description_DESC
  price_ASC
  price_DESC
  pictureURL_ASC
  pictureURL_DESC
  createdAt_ASC
  createdAt_DESC
  deletedAt_ASC
  deletedAt_DESC
}

type MenuItemPreviousValues {
  id: ID!
  title: String!
  description: String!
  price: Float!
  pictureURL: String!
  createdAt: DateTime!
  deletedAt: DateTime
}

input MenuItemScalarWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  title: String
  title_not: String
  title_in: [String!]
  title_not_in: [String!]
  title_lt: String
  title_lte: String
  title_gt: String
  title_gte: String
  title_contains: String
  title_not_contains: String
  title_starts_with: String
  title_not_starts_with: String
  title_ends_with: String
  title_not_ends_with: String
  description: String
  description_not: String
  description_in: [String!]
  description_not_in: [String!]
  description_lt: String
  description_lte: String
  description_gt: String
  description_gte: String
  description_contains: String
  description_not_contains: String
  description_starts_with: String
  description_not_starts_with: String
  description_ends_with: String
  description_not_ends_with: String
  price: Float
  price_not: Float
  price_in: [Float!]
  price_not_in: [Float!]
  price_lt: Float
  price_lte: Float
  price_gt: Float
  price_gte: Float
  pictureURL: String
  pictureURL_not: String
  pictureURL_in: [String!]
  pictureURL_not_in: [String!]
  pictureURL_lt: String
  pictureURL_lte: String
  pictureURL_gt: String
  pictureURL_gte: String
  pictureURL_contains: String
  pictureURL_not_contains: String
  pictureURL_starts_with: String
  pictureURL_not_starts_with: String
  pictureURL_ends_with: String
  pictureURL_not_ends_with: String
  createdAt: DateTime
  createdAt_not: DateTime
  createdAt_in: [DateTime!]
  createdAt_not_in: [DateTime!]
  createdAt_lt: DateTime
  createdAt_lte: DateTime
  createdAt_gt: DateTime
  createdAt_gte: DateTime
  deletedAt: DateTime
  deletedAt_not: DateTime
  deletedAt_in: [DateTime!]
  deletedAt_not_in: [DateTime!]
  deletedAt_lt: DateTime
  deletedAt_lte: DateTime
  deletedAt_gt: DateTime
  deletedAt_gte: DateTime
  AND: [MenuItemScalarWhereInput!]
  OR: [MenuItemScalarWhereInput!]
  NOT: [MenuItemScalarWhereInput!]
}

type MenuItemSubscriptionPayload {
  mutation: MutationType!
  node: MenuItem
  updatedFields: [String!]
  previousValues: MenuItemPreviousValues
}

input MenuItemSubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: MenuItemWhereInput
  AND: [MenuItemSubscriptionWhereInput!]
  OR: [MenuItemSubscriptionWhereInput!]
  NOT: [MenuItemSubscriptionWhereInput!]
}

input MenuItemUpdateInput {
  title: String
  description: String
  price: Float
  pictureURL: String
  author: UserUpdateOneWithoutMenuItemsInput
  orders: OrderUpdateManyWithoutMenuItemInput
  transactions: TransactionUpdateManyWithoutMenuItemInput
  ingredients: IngredientUpdateManyWithoutMenuItemInput
  menuItemToUpsell: MenuItemUpdateOneWithoutMenuItemToUpsellInput
  category: MenuCategoryUpdateOneWithoutMenuItemsInput
  deletedAt: DateTime
}

input MenuItemUpdateManyDataInput {
  title: String
  description: String
  price: Float
  pictureURL: String
  deletedAt: DateTime
}

input MenuItemUpdateManyMutationInput {
  title: String
  description: String
  price: Float
  pictureURL: String
  deletedAt: DateTime
}

input MenuItemUpdateManyWithoutAuthorInput {
  create: [MenuItemCreateWithoutAuthorInput!]
  delete: [MenuItemWhereUniqueInput!]
  connect: [MenuItemWhereUniqueInput!]
  set: [MenuItemWhereUniqueInput!]
  disconnect: [MenuItemWhereUniqueInput!]
  update: [MenuItemUpdateWithWhereUniqueWithoutAuthorInput!]
  upsert: [MenuItemUpsertWithWhereUniqueWithoutAuthorInput!]
  deleteMany: [MenuItemScalarWhereInput!]
  updateMany: [MenuItemUpdateManyWithWhereNestedInput!]
}

input MenuItemUpdateManyWithoutCategoryInput {
  create: [MenuItemCreateWithoutCategoryInput!]
  delete: [MenuItemWhereUniqueInput!]
  connect: [MenuItemWhereUniqueInput!]
  set: [MenuItemWhereUniqueInput!]
  disconnect: [MenuItemWhereUniqueInput!]
  update: [MenuItemUpdateWithWhereUniqueWithoutCategoryInput!]
  upsert: [MenuItemUpsertWithWhereUniqueWithoutCategoryInput!]
  deleteMany: [MenuItemScalarWhereInput!]
  updateMany: [MenuItemUpdateManyWithWhereNestedInput!]
}

input MenuItemUpdateManyWithWhereNestedInput {
  where: MenuItemScalarWhereInput!
  data: MenuItemUpdateManyDataInput!
}

input MenuItemUpdateOneRequiredWithoutIngredientsInput {
  create: MenuItemCreateWithoutIngredientsInput
  update: MenuItemUpdateWithoutIngredientsDataInput
  upsert: MenuItemUpsertWithoutIngredientsInput
  connect: MenuItemWhereUniqueInput
}

input MenuItemUpdateOneRequiredWithoutOrdersInput {
  create: MenuItemCreateWithoutOrdersInput
  update: MenuItemUpdateWithoutOrdersDataInput
  upsert: MenuItemUpsertWithoutOrdersInput
  connect: MenuItemWhereUniqueInput
}

input MenuItemUpdateOneRequiredWithoutTransactionsInput {
  create: MenuItemCreateWithoutTransactionsInput
  update: MenuItemUpdateWithoutTransactionsDataInput
  upsert: MenuItemUpsertWithoutTransactionsInput
  connect: MenuItemWhereUniqueInput
}

input MenuItemUpdateOneWithoutMenuItemToUpsellInput {
  create: MenuItemCreateWithoutMenuItemToUpsellInput
  update: MenuItemUpdateWithoutMenuItemToUpsellDataInput
  upsert: MenuItemUpsertWithoutMenuItemToUpsellInput
  delete: Boolean
  disconnect: Boolean
  connect: MenuItemWhereUniqueInput
}

input MenuItemUpdateWithoutAuthorDataInput {
  title: String
  description: String
  price: Float
  pictureURL: String
  orders: OrderUpdateManyWithoutMenuItemInput
  transactions: TransactionUpdateManyWithoutMenuItemInput
  ingredients: IngredientUpdateManyWithoutMenuItemInput
  menuItemToUpsell: MenuItemUpdateOneWithoutMenuItemToUpsellInput
  category: MenuCategoryUpdateOneWithoutMenuItemsInput
  deletedAt: DateTime
}

input MenuItemUpdateWithoutCategoryDataInput {
  title: String
  description: String
  price: Float
  pictureURL: String
  author: UserUpdateOneWithoutMenuItemsInput
  orders: OrderUpdateManyWithoutMenuItemInput
  transactions: TransactionUpdateManyWithoutMenuItemInput
  ingredients: IngredientUpdateManyWithoutMenuItemInput
  menuItemToUpsell: MenuItemUpdateOneWithoutMenuItemToUpsellInput
  deletedAt: DateTime
}

input MenuItemUpdateWithoutIngredientsDataInput {
  title: String
  description: String
  price: Float
  pictureURL: String
  author: UserUpdateOneWithoutMenuItemsInput
  orders: OrderUpdateManyWithoutMenuItemInput
  transactions: TransactionUpdateManyWithoutMenuItemInput
  menuItemToUpsell: MenuItemUpdateOneWithoutMenuItemToUpsellInput
  category: MenuCategoryUpdateOneWithoutMenuItemsInput
  deletedAt: DateTime
}

input MenuItemUpdateWithoutMenuItemToUpsellDataInput {
  title: String
  description: String
  price: Float
  pictureURL: String
  author: UserUpdateOneWithoutMenuItemsInput
  orders: OrderUpdateManyWithoutMenuItemInput
  transactions: TransactionUpdateManyWithoutMenuItemInput
  ingredients: IngredientUpdateManyWithoutMenuItemInput
  category: MenuCategoryUpdateOneWithoutMenuItemsInput
  deletedAt: DateTime
}

input MenuItemUpdateWithoutOrdersDataInput {
  title: String
  description: String
  price: Float
  pictureURL: String
  author: UserUpdateOneWithoutMenuItemsInput
  transactions: TransactionUpdateManyWithoutMenuItemInput
  ingredients: IngredientUpdateManyWithoutMenuItemInput
  menuItemToUpsell: MenuItemUpdateOneWithoutMenuItemToUpsellInput
  category: MenuCategoryUpdateOneWithoutMenuItemsInput
  deletedAt: DateTime
}

input MenuItemUpdateWithoutTransactionsDataInput {
  title: String
  description: String
  price: Float
  pictureURL: String
  author: UserUpdateOneWithoutMenuItemsInput
  orders: OrderUpdateManyWithoutMenuItemInput
  ingredients: IngredientUpdateManyWithoutMenuItemInput
  menuItemToUpsell: MenuItemUpdateOneWithoutMenuItemToUpsellInput
  category: MenuCategoryUpdateOneWithoutMenuItemsInput
  deletedAt: DateTime
}

input MenuItemUpdateWithWhereUniqueWithoutAuthorInput {
  where: MenuItemWhereUniqueInput!
  data: MenuItemUpdateWithoutAuthorDataInput!
}

input MenuItemUpdateWithWhereUniqueWithoutCategoryInput {
  where: MenuItemWhereUniqueInput!
  data: MenuItemUpdateWithoutCategoryDataInput!
}

input MenuItemUpsertWithoutIngredientsInput {
  update: MenuItemUpdateWithoutIngredientsDataInput!
  create: MenuItemCreateWithoutIngredientsInput!
}

input MenuItemUpsertWithoutMenuItemToUpsellInput {
  update: MenuItemUpdateWithoutMenuItemToUpsellDataInput!
  create: MenuItemCreateWithoutMenuItemToUpsellInput!
}

input MenuItemUpsertWithoutOrdersInput {
  update: MenuItemUpdateWithoutOrdersDataInput!
  create: MenuItemCreateWithoutOrdersInput!
}

input MenuItemUpsertWithoutTransactionsInput {
  update: MenuItemUpdateWithoutTransactionsDataInput!
  create: MenuItemCreateWithoutTransactionsInput!
}

input MenuItemUpsertWithWhereUniqueWithoutAuthorInput {
  where: MenuItemWhereUniqueInput!
  update: MenuItemUpdateWithoutAuthorDataInput!
  create: MenuItemCreateWithoutAuthorInput!
}

input MenuItemUpsertWithWhereUniqueWithoutCategoryInput {
  where: MenuItemWhereUniqueInput!
  update: MenuItemUpdateWithoutCategoryDataInput!
  create: MenuItemCreateWithoutCategoryInput!
}

input MenuItemWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  title: String
  title_not: String
  title_in: [String!]
  title_not_in: [String!]
  title_lt: String
  title_lte: String
  title_gt: String
  title_gte: String
  title_contains: String
  title_not_contains: String
  title_starts_with: String
  title_not_starts_with: String
  title_ends_with: String
  title_not_ends_with: String
  description: String
  description_not: String
  description_in: [String!]
  description_not_in: [String!]
  description_lt: String
  description_lte: String
  description_gt: String
  description_gte: String
  description_contains: String
  description_not_contains: String
  description_starts_with: String
  description_not_starts_with: String
  description_ends_with: String
  description_not_ends_with: String
  price: Float
  price_not: Float
  price_in: [Float!]
  price_not_in: [Float!]
  price_lt: Float
  price_lte: Float
  price_gt: Float
  price_gte: Float
  pictureURL: String
  pictureURL_not: String
  pictureURL_in: [String!]
  pictureURL_not_in: [String!]
  pictureURL_lt: String
  pictureURL_lte: String
  pictureURL_gt: String
  pictureURL_gte: String
  pictureURL_contains: String
  pictureURL_not_contains: String
  pictureURL_starts_with: String
  pictureURL_not_starts_with: String
  pictureURL_ends_with: String
  pictureURL_not_ends_with: String
  author: UserWhereInput
  orders_every: OrderWhereInput
  orders_some: OrderWhereInput
  orders_none: OrderWhereInput
  transactions_every: TransactionWhereInput
  transactions_some: TransactionWhereInput
  transactions_none: TransactionWhereInput
  ingredients_every: IngredientWhereInput
  ingredients_some: IngredientWhereInput
  ingredients_none: IngredientWhereInput
  menuItemToUpsell: MenuItemWhereInput
  category: MenuCategoryWhereInput
  createdAt: DateTime
  createdAt_not: DateTime
  createdAt_in: [DateTime!]
  createdAt_not_in: [DateTime!]
  createdAt_lt: DateTime
  createdAt_lte: DateTime
  createdAt_gt: DateTime
  createdAt_gte: DateTime
  deletedAt: DateTime
  deletedAt_not: DateTime
  deletedAt_in: [DateTime!]
  deletedAt_not_in: [DateTime!]
  deletedAt_lt: DateTime
  deletedAt_lte: DateTime
  deletedAt_gt: DateTime
  deletedAt_gte: DateTime
  AND: [MenuItemWhereInput!]
  OR: [MenuItemWhereInput!]
  NOT: [MenuItemWhereInput!]
}

input MenuItemWhereUniqueInput {
  id: ID
}

type Mutation {
  createIngredient(data: IngredientCreateInput!): Ingredient!
  updateIngredient(data: IngredientUpdateInput!, where: IngredientWhereUniqueInput!): Ingredient
  updateManyIngredients(data: IngredientUpdateManyMutationInput!, where: IngredientWhereInput): BatchPayload!
  upsertIngredient(where: IngredientWhereUniqueInput!, create: IngredientCreateInput!, update: IngredientUpdateInput!): Ingredient!
  deleteIngredient(where: IngredientWhereUniqueInput!): Ingredient
  deleteManyIngredients(where: IngredientWhereInput): BatchPayload!
  createLocation(data: LocationCreateInput!): Location!
  updateLocation(data: LocationUpdateInput!, where: LocationWhereUniqueInput!): Location
  updateManyLocations(data: LocationUpdateManyMutationInput!, where: LocationWhereInput): BatchPayload!
  upsertLocation(where: LocationWhereUniqueInput!, create: LocationCreateInput!, update: LocationUpdateInput!): Location!
  deleteLocation(where: LocationWhereUniqueInput!): Location
  deleteManyLocations(where: LocationWhereInput): BatchPayload!
  createMenuCategory(data: MenuCategoryCreateInput!): MenuCategory!
  updateMenuCategory(data: MenuCategoryUpdateInput!, where: MenuCategoryWhereUniqueInput!): MenuCategory
  updateManyMenuCategories(data: MenuCategoryUpdateManyMutationInput!, where: MenuCategoryWhereInput): BatchPayload!
  upsertMenuCategory(where: MenuCategoryWhereUniqueInput!, create: MenuCategoryCreateInput!, update: MenuCategoryUpdateInput!): MenuCategory!
  deleteMenuCategory(where: MenuCategoryWhereUniqueInput!): MenuCategory
  deleteManyMenuCategories(where: MenuCategoryWhereInput): BatchPayload!
  createMenuItem(data: MenuItemCreateInput!): MenuItem!
  updateMenuItem(data: MenuItemUpdateInput!, where: MenuItemWhereUniqueInput!): MenuItem
  updateManyMenuItems(data: MenuItemUpdateManyMutationInput!, where: MenuItemWhereInput): BatchPayload!
  upsertMenuItem(where: MenuItemWhereUniqueInput!, create: MenuItemCreateInput!, update: MenuItemUpdateInput!): MenuItem!
  deleteMenuItem(where: MenuItemWhereUniqueInput!): MenuItem
  deleteManyMenuItems(where: MenuItemWhereInput): BatchPayload!
  createOrder(data: OrderCreateInput!): Order!
  updateOrder(data: OrderUpdateInput!, where: OrderWhereUniqueInput!): Order
  updateManyOrders(data: OrderUpdateManyMutationInput!, where: OrderWhereInput): BatchPayload!
  upsertOrder(where: OrderWhereUniqueInput!, create: OrderCreateInput!, update: OrderUpdateInput!): Order!
  deleteOrder(where: OrderWhereUniqueInput!): Order
  deleteManyOrders(where: OrderWhereInput): BatchPayload!
  createTransaction(data: TransactionCreateInput!): Transaction!
  updateTransaction(data: TransactionUpdateInput!, where: TransactionWhereUniqueInput!): Transaction
  updateManyTransactions(data: TransactionUpdateManyMutationInput!, where: TransactionWhereInput): BatchPayload!
  upsertTransaction(where: TransactionWhereUniqueInput!, create: TransactionCreateInput!, update: TransactionUpdateInput!): Transaction!
  deleteTransaction(where: TransactionWhereUniqueInput!): Transaction
  deleteManyTransactions(where: TransactionWhereInput): BatchPayload!
  createUser(data: UserCreateInput!): User!
  updateUser(data: UserUpdateInput!, where: UserWhereUniqueInput!): User
  updateManyUsers(data: UserUpdateManyMutationInput!, where: UserWhereInput): BatchPayload!
  upsertUser(where: UserWhereUniqueInput!, create: UserCreateInput!, update: UserUpdateInput!): User!
  deleteUser(where: UserWhereUniqueInput!): User
  deleteManyUsers(where: UserWhereInput): BatchPayload!
}

enum MutationType {
  CREATED
  UPDATED
  DELETED
}

interface Node {
  id: ID!
}

type Order {
  id: ID!
  menuItem: MenuItem!
  ingredients(where: IngredientWhereInput, orderBy: IngredientOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Ingredient!]
  location: Location!
  status: MealStatus!
  createdAt: DateTime!
  deletedAt: DateTime
}

type OrderConnection {
  pageInfo: PageInfo!
  edges: [OrderEdge]!
  aggregate: AggregateOrder!
}

input OrderCreateInput {
  id: ID
  menuItem: MenuItemCreateOneWithoutOrdersInput!
  ingredients: IngredientCreateManyInput
  location: LocationCreateOneWithoutOrdersInput!
  status: MealStatus!
  deletedAt: DateTime
}

input OrderCreateManyWithoutLocationInput {
  create: [OrderCreateWithoutLocationInput!]
  connect: [OrderWhereUniqueInput!]
}

input OrderCreateManyWithoutMenuItemInput {
  create: [OrderCreateWithoutMenuItemInput!]
  connect: [OrderWhereUniqueInput!]
}

input OrderCreateWithoutLocationInput {
  id: ID
  menuItem: MenuItemCreateOneWithoutOrdersInput!
  ingredients: IngredientCreateManyInput
  status: MealStatus!
  deletedAt: DateTime
}

input OrderCreateWithoutMenuItemInput {
  id: ID
  ingredients: IngredientCreateManyInput
  location: LocationCreateOneWithoutOrdersInput!
  status: MealStatus!
  deletedAt: DateTime
}

type OrderEdge {
  node: Order!
  cursor: String!
}

enum OrderOrderByInput {
  id_ASC
  id_DESC
  status_ASC
  status_DESC
  createdAt_ASC
  createdAt_DESC
  deletedAt_ASC
  deletedAt_DESC
}

type OrderPreviousValues {
  id: ID!
  status: MealStatus!
  createdAt: DateTime!
  deletedAt: DateTime
}

input OrderScalarWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  status: MealStatus
  status_not: MealStatus
  status_in: [MealStatus!]
  status_not_in: [MealStatus!]
  createdAt: DateTime
  createdAt_not: DateTime
  createdAt_in: [DateTime!]
  createdAt_not_in: [DateTime!]
  createdAt_lt: DateTime
  createdAt_lte: DateTime
  createdAt_gt: DateTime
  createdAt_gte: DateTime
  deletedAt: DateTime
  deletedAt_not: DateTime
  deletedAt_in: [DateTime!]
  deletedAt_not_in: [DateTime!]
  deletedAt_lt: DateTime
  deletedAt_lte: DateTime
  deletedAt_gt: DateTime
  deletedAt_gte: DateTime
  AND: [OrderScalarWhereInput!]
  OR: [OrderScalarWhereInput!]
  NOT: [OrderScalarWhereInput!]
}

type OrderSubscriptionPayload {
  mutation: MutationType!
  node: Order
  updatedFields: [String!]
  previousValues: OrderPreviousValues
}

input OrderSubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: OrderWhereInput
  AND: [OrderSubscriptionWhereInput!]
  OR: [OrderSubscriptionWhereInput!]
  NOT: [OrderSubscriptionWhereInput!]
}

input OrderUpdateInput {
  menuItem: MenuItemUpdateOneRequiredWithoutOrdersInput
  ingredients: IngredientUpdateManyInput
  location: LocationUpdateOneRequiredWithoutOrdersInput
  status: MealStatus
  deletedAt: DateTime
}

input OrderUpdateManyDataInput {
  status: MealStatus
  deletedAt: DateTime
}

input OrderUpdateManyMutationInput {
  status: MealStatus
  deletedAt: DateTime
}

input OrderUpdateManyWithoutLocationInput {
  create: [OrderCreateWithoutLocationInput!]
  delete: [OrderWhereUniqueInput!]
  connect: [OrderWhereUniqueInput!]
  set: [OrderWhereUniqueInput!]
  disconnect: [OrderWhereUniqueInput!]
  update: [OrderUpdateWithWhereUniqueWithoutLocationInput!]
  upsert: [OrderUpsertWithWhereUniqueWithoutLocationInput!]
  deleteMany: [OrderScalarWhereInput!]
  updateMany: [OrderUpdateManyWithWhereNestedInput!]
}

input OrderUpdateManyWithoutMenuItemInput {
  create: [OrderCreateWithoutMenuItemInput!]
  delete: [OrderWhereUniqueInput!]
  connect: [OrderWhereUniqueInput!]
  set: [OrderWhereUniqueInput!]
  disconnect: [OrderWhereUniqueInput!]
  update: [OrderUpdateWithWhereUniqueWithoutMenuItemInput!]
  upsert: [OrderUpsertWithWhereUniqueWithoutMenuItemInput!]
  deleteMany: [OrderScalarWhereInput!]
  updateMany: [OrderUpdateManyWithWhereNestedInput!]
}

input OrderUpdateManyWithWhereNestedInput {
  where: OrderScalarWhereInput!
  data: OrderUpdateManyDataInput!
}

input OrderUpdateWithoutLocationDataInput {
  menuItem: MenuItemUpdateOneRequiredWithoutOrdersInput
  ingredients: IngredientUpdateManyInput
  status: MealStatus
  deletedAt: DateTime
}

input OrderUpdateWithoutMenuItemDataInput {
  ingredients: IngredientUpdateManyInput
  location: LocationUpdateOneRequiredWithoutOrdersInput
  status: MealStatus
  deletedAt: DateTime
}

input OrderUpdateWithWhereUniqueWithoutLocationInput {
  where: OrderWhereUniqueInput!
  data: OrderUpdateWithoutLocationDataInput!
}

input OrderUpdateWithWhereUniqueWithoutMenuItemInput {
  where: OrderWhereUniqueInput!
  data: OrderUpdateWithoutMenuItemDataInput!
}

input OrderUpsertWithWhereUniqueWithoutLocationInput {
  where: OrderWhereUniqueInput!
  update: OrderUpdateWithoutLocationDataInput!
  create: OrderCreateWithoutLocationInput!
}

input OrderUpsertWithWhereUniqueWithoutMenuItemInput {
  where: OrderWhereUniqueInput!
  update: OrderUpdateWithoutMenuItemDataInput!
  create: OrderCreateWithoutMenuItemInput!
}

input OrderWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  menuItem: MenuItemWhereInput
  ingredients_every: IngredientWhereInput
  ingredients_some: IngredientWhereInput
  ingredients_none: IngredientWhereInput
  location: LocationWhereInput
  status: MealStatus
  status_not: MealStatus
  status_in: [MealStatus!]
  status_not_in: [MealStatus!]
  createdAt: DateTime
  createdAt_not: DateTime
  createdAt_in: [DateTime!]
  createdAt_not_in: [DateTime!]
  createdAt_lt: DateTime
  createdAt_lte: DateTime
  createdAt_gt: DateTime
  createdAt_gte: DateTime
  deletedAt: DateTime
  deletedAt_not: DateTime
  deletedAt_in: [DateTime!]
  deletedAt_not_in: [DateTime!]
  deletedAt_lt: DateTime
  deletedAt_lte: DateTime
  deletedAt_gt: DateTime
  deletedAt_gte: DateTime
  AND: [OrderWhereInput!]
  OR: [OrderWhereInput!]
  NOT: [OrderWhereInput!]
}

input OrderWhereUniqueInput {
  id: ID
}

type PageInfo {
  hasNextPage: Boolean!
  hasPreviousPage: Boolean!
  startCursor: String
  endCursor: String
}

type Query {
  ingredient(where: IngredientWhereUniqueInput!): Ingredient
  ingredients(where: IngredientWhereInput, orderBy: IngredientOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Ingredient]!
  ingredientsConnection(where: IngredientWhereInput, orderBy: IngredientOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): IngredientConnection!
  location(where: LocationWhereUniqueInput!): Location
  locations(where: LocationWhereInput, orderBy: LocationOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Location]!
  locationsConnection(where: LocationWhereInput, orderBy: LocationOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): LocationConnection!
  menuCategory(where: MenuCategoryWhereUniqueInput!): MenuCategory
  menuCategories(where: MenuCategoryWhereInput, orderBy: MenuCategoryOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [MenuCategory]!
  menuCategoriesConnection(where: MenuCategoryWhereInput, orderBy: MenuCategoryOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): MenuCategoryConnection!
  menuItem(where: MenuItemWhereUniqueInput!): MenuItem
  menuItems(where: MenuItemWhereInput, orderBy: MenuItemOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [MenuItem]!
  menuItemsConnection(where: MenuItemWhereInput, orderBy: MenuItemOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): MenuItemConnection!
  order(where: OrderWhereUniqueInput!): Order
  orders(where: OrderWhereInput, orderBy: OrderOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Order]!
  ordersConnection(where: OrderWhereInput, orderBy: OrderOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): OrderConnection!
  transaction(where: TransactionWhereUniqueInput!): Transaction
  transactions(where: TransactionWhereInput, orderBy: TransactionOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Transaction]!
  transactionsConnection(where: TransactionWhereInput, orderBy: TransactionOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): TransactionConnection!
  user(where: UserWhereUniqueInput!): User
  users(where: UserWhereInput, orderBy: UserOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [User]!
  usersConnection(where: UserWhereInput, orderBy: UserOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): UserConnection!
  node(id: ID!): Node
}

type Subscription {
  ingredient(where: IngredientSubscriptionWhereInput): IngredientSubscriptionPayload
  location(where: LocationSubscriptionWhereInput): LocationSubscriptionPayload
  menuCategory(where: MenuCategorySubscriptionWhereInput): MenuCategorySubscriptionPayload
  menuItem(where: MenuItemSubscriptionWhereInput): MenuItemSubscriptionPayload
  order(where: OrderSubscriptionWhereInput): OrderSubscriptionPayload
  transaction(where: TransactionSubscriptionWhereInput): TransactionSubscriptionPayload
  user(where: UserSubscriptionWhereInput): UserSubscriptionPayload
}

type Transaction {
  id: ID!
  location: Location!
  menuItem: MenuItem!
  createdAt: DateTime!
  deletedAt: DateTime
}

type TransactionConnection {
  pageInfo: PageInfo!
  edges: [TransactionEdge]!
  aggregate: AggregateTransaction!
}

input TransactionCreateInput {
  id: ID
  location: LocationCreateOneWithoutTransactionsInput!
  menuItem: MenuItemCreateOneWithoutTransactionsInput!
  deletedAt: DateTime
}

input TransactionCreateManyWithoutLocationInput {
  create: [TransactionCreateWithoutLocationInput!]
  connect: [TransactionWhereUniqueInput!]
}

input TransactionCreateManyWithoutMenuItemInput {
  create: [TransactionCreateWithoutMenuItemInput!]
  connect: [TransactionWhereUniqueInput!]
}

input TransactionCreateWithoutLocationInput {
  id: ID
  menuItem: MenuItemCreateOneWithoutTransactionsInput!
  deletedAt: DateTime
}

input TransactionCreateWithoutMenuItemInput {
  id: ID
  location: LocationCreateOneWithoutTransactionsInput!
  deletedAt: DateTime
}

type TransactionEdge {
  node: Transaction!
  cursor: String!
}

enum TransactionOrderByInput {
  id_ASC
  id_DESC
  createdAt_ASC
  createdAt_DESC
  deletedAt_ASC
  deletedAt_DESC
}

type TransactionPreviousValues {
  id: ID!
  createdAt: DateTime!
  deletedAt: DateTime
}

input TransactionScalarWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  createdAt: DateTime
  createdAt_not: DateTime
  createdAt_in: [DateTime!]
  createdAt_not_in: [DateTime!]
  createdAt_lt: DateTime
  createdAt_lte: DateTime
  createdAt_gt: DateTime
  createdAt_gte: DateTime
  deletedAt: DateTime
  deletedAt_not: DateTime
  deletedAt_in: [DateTime!]
  deletedAt_not_in: [DateTime!]
  deletedAt_lt: DateTime
  deletedAt_lte: DateTime
  deletedAt_gt: DateTime
  deletedAt_gte: DateTime
  AND: [TransactionScalarWhereInput!]
  OR: [TransactionScalarWhereInput!]
  NOT: [TransactionScalarWhereInput!]
}

type TransactionSubscriptionPayload {
  mutation: MutationType!
  node: Transaction
  updatedFields: [String!]
  previousValues: TransactionPreviousValues
}

input TransactionSubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: TransactionWhereInput
  AND: [TransactionSubscriptionWhereInput!]
  OR: [TransactionSubscriptionWhereInput!]
  NOT: [TransactionSubscriptionWhereInput!]
}

input TransactionUpdateInput {
  location: LocationUpdateOneRequiredWithoutTransactionsInput
  menuItem: MenuItemUpdateOneRequiredWithoutTransactionsInput
  deletedAt: DateTime
}

input TransactionUpdateManyDataInput {
  deletedAt: DateTime
}

input TransactionUpdateManyMutationInput {
  deletedAt: DateTime
}

input TransactionUpdateManyWithoutLocationInput {
  create: [TransactionCreateWithoutLocationInput!]
  delete: [TransactionWhereUniqueInput!]
  connect: [TransactionWhereUniqueInput!]
  set: [TransactionWhereUniqueInput!]
  disconnect: [TransactionWhereUniqueInput!]
  update: [TransactionUpdateWithWhereUniqueWithoutLocationInput!]
  upsert: [TransactionUpsertWithWhereUniqueWithoutLocationInput!]
  deleteMany: [TransactionScalarWhereInput!]
  updateMany: [TransactionUpdateManyWithWhereNestedInput!]
}

input TransactionUpdateManyWithoutMenuItemInput {
  create: [TransactionCreateWithoutMenuItemInput!]
  delete: [TransactionWhereUniqueInput!]
  connect: [TransactionWhereUniqueInput!]
  set: [TransactionWhereUniqueInput!]
  disconnect: [TransactionWhereUniqueInput!]
  update: [TransactionUpdateWithWhereUniqueWithoutMenuItemInput!]
  upsert: [TransactionUpsertWithWhereUniqueWithoutMenuItemInput!]
  deleteMany: [TransactionScalarWhereInput!]
  updateMany: [TransactionUpdateManyWithWhereNestedInput!]
}

input TransactionUpdateManyWithWhereNestedInput {
  where: TransactionScalarWhereInput!
  data: TransactionUpdateManyDataInput!
}

input TransactionUpdateWithoutLocationDataInput {
  menuItem: MenuItemUpdateOneRequiredWithoutTransactionsInput
  deletedAt: DateTime
}

input TransactionUpdateWithoutMenuItemDataInput {
  location: LocationUpdateOneRequiredWithoutTransactionsInput
  deletedAt: DateTime
}

input TransactionUpdateWithWhereUniqueWithoutLocationInput {
  where: TransactionWhereUniqueInput!
  data: TransactionUpdateWithoutLocationDataInput!
}

input TransactionUpdateWithWhereUniqueWithoutMenuItemInput {
  where: TransactionWhereUniqueInput!
  data: TransactionUpdateWithoutMenuItemDataInput!
}

input TransactionUpsertWithWhereUniqueWithoutLocationInput {
  where: TransactionWhereUniqueInput!
  update: TransactionUpdateWithoutLocationDataInput!
  create: TransactionCreateWithoutLocationInput!
}

input TransactionUpsertWithWhereUniqueWithoutMenuItemInput {
  where: TransactionWhereUniqueInput!
  update: TransactionUpdateWithoutMenuItemDataInput!
  create: TransactionCreateWithoutMenuItemInput!
}

input TransactionWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  location: LocationWhereInput
  menuItem: MenuItemWhereInput
  createdAt: DateTime
  createdAt_not: DateTime
  createdAt_in: [DateTime!]
  createdAt_not_in: [DateTime!]
  createdAt_lt: DateTime
  createdAt_lte: DateTime
  createdAt_gt: DateTime
  createdAt_gte: DateTime
  deletedAt: DateTime
  deletedAt_not: DateTime
  deletedAt_in: [DateTime!]
  deletedAt_not_in: [DateTime!]
  deletedAt_lt: DateTime
  deletedAt_lte: DateTime
  deletedAt_gt: DateTime
  deletedAt_gte: DateTime
  AND: [TransactionWhereInput!]
  OR: [TransactionWhereInput!]
  NOT: [TransactionWhereInput!]
}

input TransactionWhereUniqueInput {
  id: ID
}

type User {
  id: ID!
  email: String
  password: String!
  name: String!
  menuItems(where: MenuItemWhereInput, orderBy: MenuItemOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [MenuItem!]
  locations(where: LocationWhereInput, orderBy: LocationOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Location!]
  menuCategories(where: MenuCategoryWhereInput, orderBy: MenuCategoryOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [MenuCategory!]
  createdAt: DateTime!
  deletedAt: DateTime
}

type UserConnection {
  pageInfo: PageInfo!
  edges: [UserEdge]!
  aggregate: AggregateUser!
}

input UserCreateInput {
  id: ID
  email: String
  password: String!
  name: String!
  menuItems: MenuItemCreateManyWithoutAuthorInput
  locations: LocationCreateManyWithoutOwnerInput
  menuCategories: MenuCategoryCreateManyWithoutOwnerInput
  deletedAt: DateTime
}

input UserCreateOneWithoutLocationsInput {
  create: UserCreateWithoutLocationsInput
  connect: UserWhereUniqueInput
}

input UserCreateOneWithoutMenuCategoriesInput {
  create: UserCreateWithoutMenuCategoriesInput
  connect: UserWhereUniqueInput
}

input UserCreateOneWithoutMenuItemsInput {
  create: UserCreateWithoutMenuItemsInput
  connect: UserWhereUniqueInput
}

input UserCreateWithoutLocationsInput {
  id: ID
  email: String
  password: String!
  name: String!
  menuItems: MenuItemCreateManyWithoutAuthorInput
  menuCategories: MenuCategoryCreateManyWithoutOwnerInput
  deletedAt: DateTime
}

input UserCreateWithoutMenuCategoriesInput {
  id: ID
  email: String
  password: String!
  name: String!
  menuItems: MenuItemCreateManyWithoutAuthorInput
  locations: LocationCreateManyWithoutOwnerInput
  deletedAt: DateTime
}

input UserCreateWithoutMenuItemsInput {
  id: ID
  email: String
  password: String!
  name: String!
  locations: LocationCreateManyWithoutOwnerInput
  menuCategories: MenuCategoryCreateManyWithoutOwnerInput
  deletedAt: DateTime
}

type UserEdge {
  node: User!
  cursor: String!
}

enum UserOrderByInput {
  id_ASC
  id_DESC
  email_ASC
  email_DESC
  password_ASC
  password_DESC
  name_ASC
  name_DESC
  createdAt_ASC
  createdAt_DESC
  deletedAt_ASC
  deletedAt_DESC
}

type UserPreviousValues {
  id: ID!
  email: String
  password: String!
  name: String!
  createdAt: DateTime!
  deletedAt: DateTime
}

type UserSubscriptionPayload {
  mutation: MutationType!
  node: User
  updatedFields: [String!]
  previousValues: UserPreviousValues
}

input UserSubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: UserWhereInput
  AND: [UserSubscriptionWhereInput!]
  OR: [UserSubscriptionWhereInput!]
  NOT: [UserSubscriptionWhereInput!]
}

input UserUpdateInput {
  email: String
  password: String
  name: String
  menuItems: MenuItemUpdateManyWithoutAuthorInput
  locations: LocationUpdateManyWithoutOwnerInput
  menuCategories: MenuCategoryUpdateManyWithoutOwnerInput
  deletedAt: DateTime
}

input UserUpdateManyMutationInput {
  email: String
  password: String
  name: String
  deletedAt: DateTime
}

input UserUpdateOneRequiredWithoutLocationsInput {
  create: UserCreateWithoutLocationsInput
  update: UserUpdateWithoutLocationsDataInput
  upsert: UserUpsertWithoutLocationsInput
  connect: UserWhereUniqueInput
}

input UserUpdateOneRequiredWithoutMenuCategoriesInput {
  create: UserCreateWithoutMenuCategoriesInput
  update: UserUpdateWithoutMenuCategoriesDataInput
  upsert: UserUpsertWithoutMenuCategoriesInput
  connect: UserWhereUniqueInput
}

input UserUpdateOneWithoutMenuItemsInput {
  create: UserCreateWithoutMenuItemsInput
  update: UserUpdateWithoutMenuItemsDataInput
  upsert: UserUpsertWithoutMenuItemsInput
  delete: Boolean
  disconnect: Boolean
  connect: UserWhereUniqueInput
}

input UserUpdateWithoutLocationsDataInput {
  email: String
  password: String
  name: String
  menuItems: MenuItemUpdateManyWithoutAuthorInput
  menuCategories: MenuCategoryUpdateManyWithoutOwnerInput
  deletedAt: DateTime
}

input UserUpdateWithoutMenuCategoriesDataInput {
  email: String
  password: String
  name: String
  menuItems: MenuItemUpdateManyWithoutAuthorInput
  locations: LocationUpdateManyWithoutOwnerInput
  deletedAt: DateTime
}

input UserUpdateWithoutMenuItemsDataInput {
  email: String
  password: String
  name: String
  locations: LocationUpdateManyWithoutOwnerInput
  menuCategories: MenuCategoryUpdateManyWithoutOwnerInput
  deletedAt: DateTime
}

input UserUpsertWithoutLocationsInput {
  update: UserUpdateWithoutLocationsDataInput!
  create: UserCreateWithoutLocationsInput!
}

input UserUpsertWithoutMenuCategoriesInput {
  update: UserUpdateWithoutMenuCategoriesDataInput!
  create: UserCreateWithoutMenuCategoriesInput!
}

input UserUpsertWithoutMenuItemsInput {
  update: UserUpdateWithoutMenuItemsDataInput!
  create: UserCreateWithoutMenuItemsInput!
}

input UserWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  email: String
  email_not: String
  email_in: [String!]
  email_not_in: [String!]
  email_lt: String
  email_lte: String
  email_gt: String
  email_gte: String
  email_contains: String
  email_not_contains: String
  email_starts_with: String
  email_not_starts_with: String
  email_ends_with: String
  email_not_ends_with: String
  password: String
  password_not: String
  password_in: [String!]
  password_not_in: [String!]
  password_lt: String
  password_lte: String
  password_gt: String
  password_gte: String
  password_contains: String
  password_not_contains: String
  password_starts_with: String
  password_not_starts_with: String
  password_ends_with: String
  password_not_ends_with: String
  name: String
  name_not: String
  name_in: [String!]
  name_not_in: [String!]
  name_lt: String
  name_lte: String
  name_gt: String
  name_gte: String
  name_contains: String
  name_not_contains: String
  name_starts_with: String
  name_not_starts_with: String
  name_ends_with: String
  name_not_ends_with: String
  menuItems_every: MenuItemWhereInput
  menuItems_some: MenuItemWhereInput
  menuItems_none: MenuItemWhereInput
  locations_every: LocationWhereInput
  locations_some: LocationWhereInput
  locations_none: LocationWhereInput
  menuCategories_every: MenuCategoryWhereInput
  menuCategories_some: MenuCategoryWhereInput
  menuCategories_none: MenuCategoryWhereInput
  createdAt: DateTime
  createdAt_not: DateTime
  createdAt_in: [DateTime!]
  createdAt_not_in: [DateTime!]
  createdAt_lt: DateTime
  createdAt_lte: DateTime
  createdAt_gt: DateTime
  createdAt_gte: DateTime
  deletedAt: DateTime
  deletedAt_not: DateTime
  deletedAt_in: [DateTime!]
  deletedAt_not_in: [DateTime!]
  deletedAt_lt: DateTime
  deletedAt_lte: DateTime
  deletedAt_gt: DateTime
  deletedAt_gte: DateTime
  AND: [UserWhereInput!]
  OR: [UserWhereInput!]
  NOT: [UserWhereInput!]
}

input UserWhereUniqueInput {
  id: ID
  email: String
}
`
      }
    